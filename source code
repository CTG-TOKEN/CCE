// JavaScript code to fetch current cryptocurrency prices

// API endpoint to fetch prices
const API_URL = "https://api.coinmarketcap.com/v1/ticker/?limit=10";

// Fetch data from API
fetch(API_URL)
  .then(response => response.json())
  .then(data => {
    // Iterate through the data and extract the desired information
    data.forEach(coin => {
      console.log(`${coin.name} - ${coin.price_usd}`);
    });
  });

// JavaScript code to fetch the current value of user's holdings

// API endpoint to fetch prices
const API_URL = "https://api.coinmarketcap.com/v1/ticker/";

// Get the current value of the user's holdings
function getHoldingsValue(holdings) {
    let totalValue = 0;
    // Iterate through the holdings and fetch the current price for each coin
    for (let i = 0; i < holdings.length; i++) {
        let coin = holdings[i];
        fetch(API_URL + coin.symbol)
            .then(response => response.json())
            .then(data => {
                totalValue += data[0].price_usd * coin.amount;
            });
    }
    return totalValue;
}

// Example usage
let myHoldings = [
    { symbol: "BTC", amount: 2.5 },
    { symbol: "ETH", amount: 10 },
    { symbol: "XRP", amount: 5000 }
];
let value = getHoldingsValue(myHoldings);
console.log("Current value of my holdings: $" + value);

// JavaScript code to track user's portfolio of cryptocurrencies

const API_URL = "https://api.coinmarketcap.com/v1/ticker/";

// Portfolio class to store and track user's holdings
class Portfolio {
    constructor() {
        this.holdings = [];
    }

    // Add a new holding to the portfolio
    addHolding(symbol, amount) {
        this.holdings.push({ symbol: symbol, amount: amount });
    }

    // Remove a holding from the portfolio
    removeHolding(symbol) {
        this.holdings = this.holdings.filter(holding => holding.symbol !== symbol);
    }

    // Get the current value of the portfolio
    getValue() {
        let totalValue = 0;
        for (let i = 0; i < this.holdings.length; i++) {
            let coin = this.holdings[i];
            fetch(API_URL + coin.symbol)
                .then(response => response.json())
                .then(data => {
                    totalValue += data[0].price_usd * coin.amount;
                });
        }
        return totalValue;
    }
}

// Example usage
let myPortfolio = new Portfolio();
myPortfolio.addHolding("BTC", 2.5);
myPortfolio.addHolding("ETH", 10);
myPortfolio.addHolding("XRP", 5000);
console.log("Current value of my portfolio: $" + myPortfolio.getValue());
myPortfolio.removeHolding("XRP");
console.log("Current value of my portfolio after removing XRP: $" + myPortfolio.getValue());

// JavaScript code to track user's portfolio of cryptocurrencies

const API_URL = "https://api.coinmarketcap.com/v1/ticker/";

// Portfolio class to store and track user's holdings
class Portfolio {
    constructor() {
        this.holdings = [];
    }

    // Add a new holding to the portfolio
    addHolding(symbol, amount) {
        this.holdings.push({ symbol: symbol, amount: amount });
        this.storeHoldings();
    }

    // Remove a holding from the portfolio
    removeHolding(symbol) {
        this.holdings = this.holdings.filter(holding => holding.symbol !== symbol);
        this.storeHoldings();
    }

    // Store the current holdings in local storage
    storeHoldings() {
        localStorage.setItem("portfolio", JSON.stringify(this.holdings));
    }

    // Retrieve the holdings from local storage
    retrieveHoldings() {
        let storedHoldings = localStorage.getItem("portfolio");
        if (storedHoldings) {
            this.holdings = JSON.parse(storedHoldings);
        }
    }

    // Get the current value of the portfolio
    getValue() {
        let totalValue = 0;
        for (let i = 0; i < this.holdings.length; i++) {
            let coin = this.holdings[i];
            fetch(API_URL + coin.symbol)
                .then(response => response.json())
                .then(data => {
                    totalValue += data[0].price_usd * coin.amount;
                });
        }
        return totalValue;
    }

    // Set an alert for a specific coin
    setAlert(symbol, price, alertType) {
        if (alertType !== "price" && alertType !== "percentage") {
            console.log("Invalid alert type. Please use 'price' or 'percentage'.");
            return;
        }
        let coin = this.holdings.find(holding => holding.symbol === symbol);
        if (!coin) {
            console.log("Coin not found in portfolio.");
            return;
        }
        let alert = {
            symbol: symbol,
            alertType: alertType,
            alertPrice: price
        };
        coin.alert = alert;
        this.storeHoldings();
    }

    // Remove an alert for a specific coin
    removeAlert(symbol) {
        let coin = this.holdings.find(holding => holding.symbol === symbol);
        if (!coin) {
            console.log("Coin not found in portfolio.");
            return;
        }
        if (!coin.alert) {
            console.log("Coin does not have an alert set.");
            return;
        }
        delete coin.alert;
        this.storeHoldings();
    }

    // Check alerts and notify user
    checkAlerts() {
        for (let i = 0; i < this.holdings.length; i++) { let coin = this.holdings[i];
if (coin.alert) {
fetch(API_URL + coin.symbol)
.then(response => response.json())
.then(data => {
let currentPrice = data[0].price_usd;
if (coin.alert.alertType === "price" && currentPrice >= coin.alert.alertPrice) {
alert(`Coin ${coin.symbol} has reached ${coin.alert.alertPrice}`);
} else if (coin.alert.alertType === "percentage") {
let percentageChange = ((currentPrice - coin.alert.alertPrice) / coin.alert.alertPrice) * 100;
if (percentageChange >= 0) {
alert(`Coin ${coin.symbol} has increased by ${percentageChange}%`);
} else {
alert(`Coin ${coin.symbol} has decreased by ${percentageChange}%`);
}
}
});
}
}

// Initialize the portfolio object and retrieve any stored holdings
let portfolio = new Portfolio();
portfolio.retrieveHoldings();

// Example usage:

// Add a holding of 1 Bitcoin to the portfolio
portfolio.addHolding("bitcoin", 1);

// Set an alert for when Bitcoin reaches $50,000
portfolio.setAlert("bitcoin", 50000, "price");

// Remove the alert for Bitcoin
portfolio.removeAlert("bitcoin");

// Check the current value of the portfolio
console.log(`Total portfolio value: ${portfolio.getValue()}`);

// Check alerts and notify user
portfolio.checkAlerts();
class Portfolio {
    constructor() {
        this.holdings = [];
        this.API_URL = 'https://api.coinmarketcap.com/v1/ticker/';
    }

    addHolding(symbol, amount) {
        // code to add a holding to the portfolio
    }

    removeHolding(symbol) {
        // code to remove a holding from the portfolio
    }

    setAlert(symbol, alertPrice, alertType) {
        // code to set an alert for a holding
    }

    removeAlert(symbol) {
        // code to remove an alert for a holding
    }

    retrieveHoldings() {
        // code to retrieve stored holdings from a database or local storage
    }

    getValue() {
        // code to calculate the total value of the portfolio
    }

    checkAlerts() {
        // code to check alerts and notify the user
    }
}


