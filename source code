// JavaScript code to fetch current cryptocurrency prices

// API endpoint to fetch prices
const API_URL = "https://api.coinmarketcap.com/v1/ticker/?limit=10";

// Fetch data from API
fetch(API_URL)
  .then(response => response.json())
  .then(data => {
    // Iterate through the data and extract the desired information
    data.forEach(coin => {
      console.log(`${coin.name} - ${coin.price_usd}`);
    });
  });

// JavaScript code to fetch the current value of user's holdings

// API endpoint to fetch prices
const API_URL = "https://api.coinmarketcap.com/v1/ticker/";

// Get the current value of the user's holdings
function getHoldingsValue(holdings) {
    let totalValue = 0;
    // Iterate through the holdings and fetch the current price for each coin
    for (let i = 0; i < holdings.length; i++) {
        let coin = holdings[i];
        fetch(API_URL + coin.symbol)
            .then(response => response.json())
            .then(data => {
                totalValue += data[0].price_usd * coin.amount;
            });
    }
    return totalValue;
}

// Example usage
let myHoldings = [
    { symbol: "BTC", amount: 2.5 },
    { symbol: "ETH", amount: 10 },
    { symbol: "XRP", amount: 5000 }
];
let value = getHoldingsValue(myHoldings);
console.log("Current value of my holdings: $" + value);

// JavaScript code to track user's portfolio of cryptocurrencies

const API_URL = "https://api.coinmarketcap.com/v1/ticker/";

// Portfolio class to store and track user's holdings
class Portfolio {
    constructor() {
        this.holdings = [];
    }

    // Add a new holding to the portfolio
    addHolding(symbol, amount) {
        this.holdings.push({ symbol: symbol, amount: amount });
    }

    // Remove a holding from the portfolio
    removeHolding(symbol) {
        this.holdings = this.holdings.filter(holding => holding.symbol !== symbol);
    }

    // Get the current value of the portfolio
    getValue() {
        let totalValue = 0;
        for (let i = 0; i < this.holdings.length; i++) {
            let coin = this.holdings[i];
            fetch(API_URL + coin.symbol)
                .then(response => response.json())
                .then(data => {
                    totalValue += data[0].price_usd * coin.amount;
                });
        }
        return totalValue;
    }
}

// Example usage
let myPortfolio = new Portfolio();
myPortfolio.addHolding("BTC", 2.5);
myPortfolio.addHolding("ETH", 10);
myPortfolio.addHolding("XRP", 5000);
console.log("Current value of my portfolio: $" + myPortfolio.getValue());
myPortfolio.removeHolding("XRP");
console.log("Current value of my portfolio after removing XRP: $" + myPortfolio.getValue());


